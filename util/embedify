#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
  embedify - embeds concrete tag resources in html

Filters html looking for script, css, and potentially other tags
which would be loaded from arbitrary URLs and embeds them in tags
in the output html so that the output can be a single self-contained
application.

Useful if you want to take an html/js application someplace where
there's no network, or if you want to package it for something like
itch.io, or any other case where you want it to be an independent
application.

"""

import argparse
import html
import os
import re
import sys
import urllib.request


from html.parser import HTMLParser
from urllib.parse import urlparse

# contents = urllib.request.urlopen("http://example.com/foo/bar").read()
#   or:
# with urllib.request.urlopen('http://python.org/') as response:
#   html = response.read()
# but how to check errors?

def kill_js_comments(text):
    # thx https://stackoverflow.com/questions/241327/remove-c-and-c-comments-using-python
    #     ^^ based strongly on Markus Jarderot's cool code from here
    def replacer(match):
        s = match.group(0)
        if s[0] == '/':
            if s[1] == '/':
                return "" # line comment gets completely removed
            else:
                return " "  # block comment becomes whitespace (single char is enough)
        else:
            return s  # it's a string so keep it
    pattern = re.compile(
        #r'//.*?$|/\*.*?\*/|\'(?:\\.|[^\\\'])*\'|"(?:\\.|[^\\"])*"', # good but doesn't handle ``
        # handle backtick strings as well:
        r'//.*?$|/\*.*?\*/|\'(?:\\.|[^\\\'])*\'|"(?:\\.|[^\\"])*"|`(?:\\.|[^\\`])*`',
        #r'//.*?\n|/\*.*?\*/|\'(?:\\.|[^\\\'])*\'|"(?:\\.|[^\\"])*"', # kills terminating newlines on //
        re.DOTALL | re.MULTILINE
    )
    return re.sub(pattern, replacer, text)

class embedder(HTMLParser):
    def __init__(self, source_file):
        super().__init__()
        self.source_file = source_file
        with open(source_file, "r") as srcf:
            self.source = srcf.read()
        self.base_path = os.path.dirname(os.path.realpath(source_file))
        self.next_close_tag = ''

    def write(self):
        self.feed(self.source)

    def url_for_tag_contents(self, tag, url):
        url = urlparse(url)
        if not url.scheme:
            # eg <script src="local_file"></script>
            url = url._replace(scheme='file', netloc=self.base_path)

        return url

    def fetch_tag_contents(self, tag, orig_url):
        parsed_url = self.url_for_tag_contents(tag, orig_url)
        url = urllib.parse.urlunparse(parsed_url) # normalized url
        reply = urllib.request.urlopen(url)

        charset = reply.headers.get_content_charset()
        if not charset:  # this covers local files, but not really grr...
            print(f"forcing charset for {url} ({orig_url})", file=sys.stderr)
            charset = 'utf-8'

        contents = reply.read().decode(charset)
        if tag in ('script', 'style'):
            contents = kill_js_comments(contents)
            contents = f"/* {orig_url} imported via {' '.join(sys.argv)} */\n" + contents
        return contents

    def format_attr(self, attr):
        return f"{attr[0]}='{html.escape(attr[1])}'"

    def import_and_print(self, tag, attrs):
        tagout = [ "" ] # empty string makes the join dwiw
        contents = ""
        attr_dict = dict(attrs)

        # sigh there are at least 2 cases.. errf more:
        #   script tag:  output is script tag
        #   link tag: if rel="stylesheet", tag is <style>
        #             if rel="icon", change the href to a data url??? but it's still link
        #             OMFG if rel=preload there's a whole other syntax
        #             the exceptions go on and on...
        # OK let's say we only care about script and stylesheet links
        # for the moment.  we'll probably want img 
        # otherwise we just let it go
        if tag == 'link' and attr_dict['rel'] == 'stylesheet':
            # in the link/stylesheet case, we need to convert to a <style>
            # tag and --forget the rest of the attrs-- (I think)
            tag = 'style'
            self.next_close_tag = 'style'
            contents = self.fetch_tag_contents(tag, attr_dict['href'])
        elif tag == 'script':
            for attr in attrs:
                if attr[0] == 'src':
                    contents = self.fetch_tag_contents(tag, attr[1])
                else:
                    tagout.append(self.format_attr(attr))
        else:
            # gar another tag... I dunno.  shouldn't get here, I guess.
            for attr in attrs:
                tagout.append(self.format_attr(attr))

        print(f"<{tag}", " ".join(tagout), ">", contents, sep='', end='')

    def handle_starttag(self, tag, attrs):
        # what do we want to embed?
        #   - script src
        #   - link href rel=stylesheet
        #   - potentially img, but we don't care for this project)
        # OTHERWISE we want to pass the tag through.
        if tag == 'script':
            self.import_and_print(tag, attrs)
        elif tag == 'link':
            self.import_and_print(tag, attrs)
        else:
            # will this mess up on <foo/> type tags?
            print(self.get_starttag_text(), end='')

    def handle_endtag(self, tag):
        if self.next_close_tag:
            #print(f"   changing tag from {tag} to {self.next_close_tag}", file=sys.stderr)
            tag = self.next_close_tag
            self.next_close_tag = ''

        print(f"</{tag}>", end='')

    def handle_comment(self, data):
        # elide comments; this will mess with whitespace though
        #print("YO COMMENT ELIDED", file=sys.stderr)
        pass

    def handle_data(self, data):
       #print(f"Encountered some data  : '{data}'\n      in tag '{self.get_starttag_text()}", file=sys.stderr)
       print(data, end='')

def parse_args():
    # we're going to want:
    #  - input file(s)
    #  - options for things -not- to embed.  eg, say 
    parser = argparse.ArgumentParser(
        description='embeds concrete tag resources in html',
    )
    parser.add_argument('source_filename')
    return parser.parse_args()

def main():
    args = parse_args()

    emb = embedder(args.source_filename)
    emb.write()

if __name__ == '__main__':
    main()


